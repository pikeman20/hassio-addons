name: Build & Push Addon Images

on:
  push:
    paths:
      - '**'
  workflow_dispatch:
    inputs:
      addon:
        description: 'Addon folder to build'
        required: true
        type: choice
        options:
          - addon-nginx-proxy-manager/proxy-manager
          - assist_microphone
          - ecovacs-bumper

jobs:
  detect-and-build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_matrix: ${{ steps.set-matrix.outputs.has_matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **
          files_ignore: |
            .github/**

      - name: Set matrix for workflow_dispatch
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.addon }}" ]; then
            ADDON="${{ github.event.inputs.addon }}"
            ARCHS=$(yq '.build_from | keys | join(" ")' $ADDON/build.yaml)
            MATRIX="{\"include\":["
            for arch in $ARCHS; do
              MATRIX="$MATRIX{\"addon\":\"$ADDON\",\"arch\":\"$arch\"},"
            done
            MATRIX="${MATRIX%,}]}"
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
            echo "has_matrix=true" >> $GITHUB_OUTPUT
          else
            ADDONS=$(yq '.addons | join(" ")' .github/addons.yaml)
            MATRIX="{\"include\":["
            HAS_MATRIX="false"
            for addon in $ADDONS; do
              if grep -q "^$addon/" <<< "${{ steps.changed.outputs.all_changed_files }}" || grep -q "^$addon$" <<< "${{ steps.changed.outputs.all_changed_files }}"; then
                ARCHS=$(yq '.build_from | keys | join(" ")' $addon/build.yaml)
                for arch in $ARCHS; do
                  MATRIX="$MATRIX{\"addon\":\"$addon\",\"arch\":\"$arch\"},"
                  HAS_MATRIX="true"
                done
              fi
            done
            MATRIX="${MATRIX%,}]}"
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
            echo "has_matrix=$HAS_MATRIX" >> $GITHUB_OUTPUT
          fi

  build-addon:
    needs: detect-and-build
    if: needs.detect-and-build.outputs.has_matrix == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-and-build.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push addon image
        run: |
          cd "${{ matrix.addon }}"
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$(echo ${{ matrix.addon }} | tr '/' '-')-${{ matrix.arch }}"
          VERSION=$(yq '.version' config.yaml)
          BUILD_FROM=$(yq ".build_from.${{ matrix.arch }}" build.yaml)
          
          # Map architecture to Docker platform
          case "${{ matrix.arch }}" in
            amd64) PLATFORM="linux/amd64" ;;
            aarch64) PLATFORM="linux/arm64" ;;
            armv7) PLATFORM="linux/arm/v7" ;;
            armhf) PLATFORM="linux/arm/v6" ;;
            i386) PLATFORM="linux/386" ;;
            *)
              echo "Unsupported architecture: ${{ matrix.arch }}"
              echo "Supported: amd64, aarch64, armv7, armhf, i386"
              exit 1
              ;;
          esac
          
          echo "Building for architecture: ${{ matrix.arch }}"
          echo "Docker platform: $PLATFORM"
          echo "Base image: $BUILD_FROM"
          
          docker buildx build \
            --platform "$PLATFORM" \
            --build-arg BUILD_FROM="$BUILD_FROM" \
            --build-arg BUILD_ARCH="${{ matrix.arch }}" \
            --build-arg BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg BUILD_DESCRIPTION="$(yq '.description' config.yaml)" \
            --build-arg BUILD_NAME="$(yq '.name' config.yaml)" \
            --build-arg BUILD_REF="${{ github.sha }}" \
            --build-arg BUILD_REPOSITORY="${{ github.repository }}" \
            --build-arg BUILD_VERSION="$VERSION" \
            --tag "$IMAGE_NAME:latest" \
            --tag "$IMAGE_NAME:$VERSION" \
            --push \
            .
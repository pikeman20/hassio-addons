#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: Real-time Microphone Filter
# Runs the main microphone filtering service
# ==============================================================================

bashio::log.info "Starting Real-time Microphone Filter service..."

# Set up PulseAudio environment
export PULSE_SERVER=unix:/var/run/pulse/native

# Check for alternative socket locations if needed
if [ ! -S "/var/run/pulse/native" ]; then
    if [ -S "/run/pulse/native" ]; then
        export PULSE_SERVER=unix:/run/pulse/native
    elif [ -S "/tmp/pulse-socket" ]; then
        export PULSE_SERVER=unix:/tmp/pulse-socket
    else
        unset PULSE_SERVER
    fi
fi

# Wait for virtual devices to be created by init script
bashio::log.info "Waiting for virtual devices to be ready..."
sleep 2

# Verify virtual devices exist
for i in {1..15}; do
    if pactl list sinks short | grep -q "virtual_mic_sink" && pactl list sources short | grep -q "virtual_mic"; then
        bashio::log.info "Virtual devices confirmed ready"
        break
    fi
    bashio::log.info "Waiting for virtual devices... (attempt $i/15)"
    sleep 2
done

# Final check
if ! (pactl list sinks short | grep -q "virtual_mic_sink" && pactl list sources short | grep -q "virtual_mic"); then
    bashio::log.error "Virtual devices not found after waiting. Check init script logs."
    bashio::log.info "PULSE_SERVER: ${PULSE_SERVER:-not set}"
    bashio::log.warning "Continuing without virtual devices - service will be available for debugging"
fi

# Change to app directory
cd /app

# Set Python path
export PYTHONPATH="/app:${PYTHONPATH:-}"

# Set library path for obs-mic-filter
export LD_LIBRARY_PATH="/app/lib:${LD_LIBRARY_PATH:-}"

# Set PulseAudio configuration path
export PULSE_CONFIG_PATH=/tmp/pulse-config

# Get configuration from Home Assistant
declare auto_start
auto_start=$(bashio::config 'auto_start')

declare log_level
log_level=$(bashio::config 'log_level')

# Set log level
export LOG_LEVEL="${log_level^^}"

bashio::log.info "Configuration loaded: auto_start=${auto_start}, log_level=${log_level}"

# Function to check if PulseAudio is still available
check_pulseaudio_health() {
    if [ -n "${PULSE_SERVER}" ]; then
        pactl info >/dev/null 2>&1
    else
        # Try default connection
        unset PULSE_SERVER
        pactl info >/dev/null 2>&1
    fi
}

# Enhanced service startup with health monitoring
while true; do
    bashio::log.info "Starting microphone filter service..."
    
    # Check PulseAudio before starting
    if ! check_pulseaudio_health; then
        bashio::log.warning "PulseAudio connection issue detected before startup"
        
        # Try to find working socket
        for socket in "/var/run/pulse/native" "/run/pulse/native"; do
            if [ -S "$socket" ]; then
                export PULSE_SERVER="unix:$socket"
                if check_pulseaudio_health; then
                    bashio::log.info "Found working PulseAudio socket: $socket"
                    break
                fi
            fi
        done
    fi
    
    # Start the main service
    if bashio::var.true "${auto_start}"; then
        bashio::log.info "Auto-start enabled, starting microphone filter..."
        python3 ha_mic_filter_service.py --auto-start
    else
        bashio::log.info "Auto-start disabled, starting in standby mode..."
        python3 ha_mic_filter_service.py
    fi
    
    # Service has exited, check if we should restart
    exit_code=$?
    bashio::log.warning "Microphone filter service exited with code: $exit_code"
    
    # If exit code is 0, it was a clean shutdown, don't restart
    if [ $exit_code -eq 0 ]; then
        bashio::log.info "Clean shutdown detected, not restarting"
        break
    fi
    
    # Wait before restart to avoid rapid restart loops
    bashio::log.info "Waiting 10 seconds before restart attempt..."
    sleep 10
    
    # Check if PulseAudio is available before restart
    if check_pulseaudio_health; then
        bashio::log.info "PulseAudio available, restarting service..."
    else
        bashio::log.warning "PulseAudio still not available, will attempt restart anyway"
    fi
done

bashio::log.info "Microphone Filter service stopped"
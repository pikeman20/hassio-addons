#!/command/with-contenv bashio

# LOG_FILE="/var/log/pulse_monitor.log"
# touch "$LOG_FILE"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $*"
}

# Optimized, non-configurable parameters for robust operation
DEBOUNCE_INTERVAL=5
PERIODIC_INTERVAL=60
MAX_FAILURES=10
MAX_BACKOFF=300

if bashio::config.true 'use_tcp_pulse'; then
    REMOTE_HOST="$(bashio::config 'tcp_pulse_host')"
    PULSE_PORT="$(bashio::config 'tcp_pulse_port' '4713')"
    SINK_NAME="$(bashio::config 'sink_name' 'remote_speaker_win')"
    SOURCE_NAME="$(bashio::config 'source_name' 'remote_mic_win')"

    failure_count=0
    backoff=5

    health_check() {
        # Check sink and source exist in pactl info
        pactl info | grep -q "${SINK_NAME}" || return 1
        pactl info | grep -q "${SOURCE_NAME}" || return 1

        # Check if using tunnel modules (remote)
        local is_tunnel_sink=0
        local is_tunnel_source=0
        pactl list modules short | grep -q "module-tunnel-sink.*sink_name=${SINK_NAME}" && is_tunnel_sink=1
        pactl list modules short | grep -q "module-tunnel-source.*source_name=${SOURCE_NAME}" && is_tunnel_source=1

        if [ "$is_tunnel_sink" -eq 1 ]; then
            # For tunnel sink, check module is loaded and state is RUNNING/IDLE
            pactl list sinks | awk '/^Sink #/ {sink=1} sink && /Name: / {name=$2; sink=0} sink && /State: / {state=$2; if (name=="'"${SINK_NAME}"'" && state!="RUNNING" && state!="IDLE") exit 4}' || return 4
        else
            pactl list short sinks | grep -q "${SINK_NAME}" || return 2
            pactl list sinks | awk '/^Sink #/ {sink=1} sink && /Name: / {name=$2; sink=0} sink && /State: / {state=$2; if (name=="'"${SINK_NAME}"'" && state!="RUNNING" && state!="IDLE") exit 5}' || return 5
        fi

        if [ "$is_tunnel_source" -eq 1 ]; then
            # For tunnel source, check module is loaded and state is RUNNING/IDLE
            pactl list sources | awk '/^Source #/ {src=1} src && /Name: / {name=$2; src=0} src && /State: / {state=$2; if (name=="'"${SOURCE_NAME}"'" && state!="RUNNING" && state!="IDLE") exit 6}' || return 6
        else
            pactl list short sources | grep -q "${SOURCE_NAME}" || return 3
            pactl list sources | awk '/^Source #/ {src=1} src && /Name: / {name=$2; src=0} src && /State: / {state=$2; if (name=="'"${SOURCE_NAME}"'" && state!="RUNNING" && state!="IDLE") exit 7}' || return 7
        fi

        return 0
    }

    reload_remote_pulse() {
        REMOTE_IP=$(getent hosts "${REMOTE_HOST}" | awk '{ print $1 }' | head -n 1)
        if [ -z "${REMOTE_IP}" ]; then
            log "ERROR: Could not resolve IP for ${REMOTE_HOST}. Cannot setup remote audio."
            ((failure_count++))
            return 1
        fi

        if ! timeout 1 bash -c "</dev/tcp/${REMOTE_IP}/${PULSE_PORT}" 2>/dev/null; then
            log "WARNING: PulseAudio port ${PULSE_PORT} on ${REMOTE_IP} (${REMOTE_HOST}) is not open or reachable."
            ((failure_count++))
            return 2
        fi

        log "Unloading and reloading tunnel sink: ${SINK_NAME}"
        # Unload all module-tunnel-sink with this sink_name
        for module_id in $(pactl list modules short | awk '/module-tunnel-sink.*sink_name='"${SINK_NAME}"'/ {print $1}'); do
            pactl unload-module "$module_id" 2>/dev/null || true
        done
        pactl load-module module-tunnel-sink server="${REMOTE_IP}" sink_name="${SINK_NAME}" && \
            pactl set-default-sink "${SINK_NAME}"

        log "Unloading and reloading tunnel source: ${SOURCE_NAME}"
        # Unload all module-tunnel-source with this source_name
        for module_id in $(pactl list modules short | awk '/module-tunnel-source.*source_name='"${SOURCE_NAME}"'/ {print $1}'); do
            pactl unload-module "$module_id" 2>/dev/null || true
        done
        pactl load-module module-tunnel-source server="${REMOTE_IP}" source_name="${SOURCE_NAME}" && \
            pactl set-default-source "${SOURCE_NAME}"

        # Health check
        if health_check; then
            log "Health check passed: sink/source loaded."
            failure_count=0
            backoff=5
        else
            log "ERROR: Health check failed after reload."
            ((failure_count++))
            return 3
        fi
    }

    # Initial setup
    reload_remote_pulse

    last_reload=0

    # Event-driven reload with debounce and backoff
    pactl subscribe | while read -r event; do
        now=$(date +%s)
        if echo "$event" | grep -q -E "remove"; then
            if [ $((now - last_reload)) -ge $DEBOUNCE_INTERVAL ]; then
                log "PulseAudio event detected: $event"
                if ! health_check; then
                    log "Event health check failed, reloading remote pulse"
                    reload_remote_pulse
                fi
                last_reload=$now
                if [ "$failure_count" -ge "$MAX_FAILURES" ]; then
                    log "CRITICAL: Too many consecutive failures ($failure_count). Backing off for $backoff seconds."
                    sleep "$backoff"
                    backoff=$((backoff * 2))
                    if [ "$backoff" -gt "$MAX_BACKOFF" ]; then
                        backoff="$MAX_BACKOFF"
                    fi
                fi
            # else
            #     log "Event ignored due to debounce: $event"
            fi
        fi
    done &

    # Fallback: periodic check with backoff and failure limit
    while true; do
        sleep "$PERIODIC_INTERVAL"
        if ! health_check; then
            log "Periodic health check failed, reloading remote pulse"
            reload_remote_pulse
        fi
        if [ "$failure_count" -ge "$MAX_FAILURES" ]; then
            log "CRITICAL: Too many consecutive failures ($failure_count). Backing off for $backoff seconds."
            sleep "$backoff"
            backoff=$((backoff * 2))
            if [ "$backoff" -gt "$MAX_BACKOFF" ]; then
                backoff="$MAX_BACKOFF"
            fi
        fi
    done
else
    while true; do sleep 3600; done
fi